{"version":3,"sources":["Score.jsx","Square.jsx","Board.jsx","Game.jsx","Mode.jsx","App.js","serviceWorker.js","index.js"],"names":["Score","props","placement","xTurn","winScore","className","Square","currentVal","onClick","style","color","Board","mode","useState","squares","setSquares","setXTurn","winSet","setWinSet","winning","board","player","calculateWinner","line","a","b","c","avail","reboard","filter","s","declarationType","stringDec","setTimeout","alert","index","cloneBoard","Boolean","length","newindex","minMaxMove","useEffect","cloneWinSet","winner","handleClick","currentIndex","handleClickMoveAI","then","newBoard","array","score","g","bestMove","bestScore","moves","i","move","push","Array","map","e","k","id","key","winnerDeclared","squareFilled","handleClickMove","Game","Mode","setMode","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17f01dfb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Score = (props) => {\n  const { placement, xTurn, winScore } = props;\n  return (\n    <div\n      className={\n        \"score \" +\n        placement +\n        ((xTurn && placement === \"top\") || (!xTurn && placement === \"bottom\")\n          ? \" active\"\n          : \"\")\n      }\n    >\n      <div>Player: {placement === \"top\" ? \"X\" : \"0\"} </div>\n      <div className=\"scorePlayer\">\n        {winScore}\n        <br /> Win\n      </div>\n    </div>\n  );\n};\n\nexport default Score;\n","import React from \"react\";\n\nconst Square = (props) => {\n  const { currentVal, onClick } = props;\n  return (\n    <div\n      className=\"square\"\n      style={{ color: currentVal === \"X\" ? \"#33AFCA\" : \"#E24226\" }}\n      onClick={onClick}\n    >\n      <div className=\"inner\">\n        {typeof currentVal === \"string\" ? currentVal : \"\"}\n      </div>\n    </div>\n  );\n};\n\nexport default Square;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport Score from \"./Score\";\nimport Square from \"./Square\";\n\nconst Board = (props) => {\n  const { mode } = props;\n  const initialBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8]; //[...Array(9)].fill(null);\n  const [squares, setSquares] = useState(initialBoard);\n  const [xTurn, setXTurn] = useState(true);\n  const [winSet, setWinSet] = useState([0, 0]);\n\n  const winning = (board, player) => {\n    if (\n      (board[0] === player && board[1] === player && board[2] === player) ||\n      (board[3] === player && board[4] === player && board[5] === player) ||\n      (board[6] === player && board[7] === player && board[8] === player) ||\n      (board[0] === player && board[3] === player && board[6] === player) ||\n      (board[1] === player && board[4] === player && board[7] === player) ||\n      (board[2] === player && board[5] === player && board[8] === player) ||\n      (board[0] === player && board[4] === player && board[8] === player) ||\n      (board[2] === player && board[4] === player && board[6] === player)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8], // row win\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8], // col win\n      [0, 4, 8],\n      [2, 4, 6], //diagonals win\n    ];\n    for (let line of lines) {\n      const [a, b, c] = line;\n      if (\n        squares[a] &&\n        squares[b] &&\n        squares[c] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a]; // x or 0\n      }\n    }\n    return null;\n  };\n\n  const avail = (reboard) => {\n    return reboard.filter((s) => s !== \"X\" && s !== \"O\");\n  };\n\n  const declarationType = (stringDec) => {\n    setTimeout(() => {\n      alert(stringDec);\n      setSquares([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n      return;\n    }, 500);\n  };\n\n  useEffect(() => {\n    let cloneWinSet = [...winSet];\n    let winner = calculateWinner(squares);\n    if (!winner) return;\n    if (winner === \"X\") cloneWinSet[0] = cloneWinSet[0] + 1;\n    else cloneWinSet[1] = cloneWinSet[1] + 1;\n    if (winner) {\n      declarationType(!xTurn ? \"Player X WIN\" : \"Player 0 WIN\");\n    } else if (avail(squares).length === 0) {\n      declarationType(\"TIE\");\n    }\n    setWinSet(cloneWinSet);\n  }, [squares]);\n\n  async function handleClickMoveAI(index) {\n    const cloneBoard = [...squares];\n    if (cloneBoard[index] !== \"X\" && cloneBoard[index] !== \"O\") {\n      cloneBoard[index] = \"X\";\n      const winnerDeclared = Boolean(calculateWinner(cloneBoard));\n      if (winnerDeclared) {\n        declarationType(\"YOU WIN\");\n      } else if (avail(cloneBoard).length === 0) {\n        declarationType(\"TIE\");\n      } else {\n        var newindex = minMaxMove(cloneBoard, \"O\").index;\n        cloneBoard[newindex] = \"O\";\n        const winnerAIDeclared = Boolean(calculateWinner(cloneBoard));\n        if (winnerAIDeclared) {\n          declarationType(\"YOU LOSE\");\n        } else if (avail(cloneBoard).length === 0) {\n          declarationType(\"TIE\");\n        }\n      }\n    }\n\n    return cloneBoard;\n  }\n\n  const handleClickMove = (index) => {\n    const cloneBoard = [...squares];\n\n    const winnerDeclared = Boolean(calculateWinner(cloneBoard));\n    const squareFilled = typeof cloneBoard[index] !== \"number\";\n    if (winnerDeclared || squareFilled) return;\n    cloneBoard[index] = xTurn ? \"X\" : \"0\";\n    setSquares(cloneBoard);\n    setXTurn(!xTurn);\n  };\n\n  const handleClick = (currentIndex) => {\n    handleClickMoveAI(currentIndex).then((newBoard) => {\n      setSquares(newBoard);\n      setXTurn(true);\n    });\n  };\n\n  const minMaxMove = (reboard, player) => {\n    let array = avail(reboard);\n    if (winning(reboard, \"X\")) {\n      return {\n        score: -10,\n      };\n    } else if (winning(reboard, \"O\")) {\n      return {\n        score: 10,\n      };\n    } else if (array.length === 0) {\n      return {\n        score: 0,\n      };\n    }\n\n    let moves = [];\n    let g;\n    for (let i = 0; i < array.length; i++) {\n      var move = {};\n      move.index = reboard[array[i]];\n      reboard[array[i]] = player;\n\n      if (player === \"O\") {\n        g = minMaxMove(reboard, \"X\");\n        move.score = g.score;\n      } else {\n        g = minMaxMove(reboard, \"O\");\n        move.score = g.score;\n      }\n      reboard[array[i]] = move.index;\n      moves.push(move);\n    }\n\n    var bestMove;\n    let bestScore;\n    if (player === \"O\") {\n      bestScore = -10000;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score > bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } else {\n      bestScore = 10000;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    }\n    return moves[bestMove];\n  };\n\n  return (\n    <Fragment>\n      <div className=\"board\">\n        <Score placement=\"top\" xTurn={xTurn} winScore={winSet[0]} />\n\n        {[...Array(3)].map((e, k) => (\n          <div className=\"row\" id={\"ROWK_\" + k} key={\"row_\" + k}>\n            {[...Array(3)].map((e, i) => (\n              <Square\n                onClick={(e) => {\n                  debugger;\n                  let currentIndex = 3 * k + i;\n                  mode === \"A\"\n                    ? handleClick(currentIndex)\n                    : handleClickMove(currentIndex);\n                }}\n                currentVal={squares[3 * k + i]}\n                key={\"square_\" + i + k}\n              />\n            ))}\n          </div>\n        ))}\n        <Score placement=\"bottom\" xTurn={xTurn} winScore={winSet[1]} />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\n\nconst Game = (props) => {\n  const { mode } = props;\n  return (\n    <div className=\"game\">\n      Tic Tac Toe\n      <Board mode={mode} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\n\nconst Mode = (props) => {\n  const { setMode } = props;\n  return (\n    <div className=\"modeCnt\">\n      <div className=\"vsDesc\">VS</div>\n      <div className=\"modeCol\">\n        <div className=\"modeChoice\" onClick={() => setMode(\"H\")}>\n          HUMAN\n          <br />\n          <div className=\"modeTag hu\">Intelligence</div>\n        </div>\n        <div className=\"modeChoice\" onClick={() => setMode(\"A\")}>\n          ARTIFICIAL <br />\n          <div className=\"modeTag ai\">Intelligence</div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Mode;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nimport Mode from \"./Mode\";\n\nfunction App() {\n  const [mode, setMode] = useState(null);\n  return (\n    <div className=\"App\">\n      {mode ? <Game mode={mode} /> : <Mode setMode={setMode} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}