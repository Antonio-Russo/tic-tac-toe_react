{"version":3,"sources":["Score.jsx","Square.jsx","Board.jsx","Game.jsx","Mode.jsx","App.js","serviceWorker.js","index.js"],"names":["Score","props","placement","xTurn","winScore","className","Square","currentVal","onClick","style","color","Board","initialBoard","Array","fill","useState","squares","setSquares","setXTurn","winSet","setWinSet","calculateWinner","line","a","b","c","useEffect","cloneWinSet","winner","map","e","k","id","key","i","index","cloneBoard","winnerDeclared","Boolean","squareFilled","handleClickMove","Game","Mode","setMode","App","mode","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4fb45807.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Score = (props) => {\n  const { placement, xTurn, winScore } = props;\n  return (\n    <div\n      className={\n        \"score \" +\n        placement +\n        ((xTurn && placement === \"top\") || (!xTurn && placement === \"bottom\")\n          ? \" active\"\n          : \"\")\n      }\n    >\n      <div>Player: {placement === \"top\" ? \"X\" : \"0\"} </div>\n      <div className=\"scorePlayer\">\n        {winScore}\n        <br /> Win\n      </div>\n    </div>\n  );\n};\n\nexport default Score;\n","import React from \"react\";\n\nconst Square = (props) => {\n  const { currentVal, onClick, xTurn } = props;\n  return (\n    <div\n      className=\"square\"\n      style={{ color: currentVal === \"X\" ? \"#33AFCA\" : \"#E24226\" }}\n      onClick={() => {\n        onClick();\n      }}\n    >\n      <div className=\"inner\">{currentVal}</div>\n    </div>\n  );\n};\n\nexport default Square;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport Score from \"./Score\";\nimport Square from \"./Square\";\n\nconst Board = () => {\n  const initialBoard = [...Array(9)].fill(null);\n  const [squares, setSquares] = useState(initialBoard);\n  const [xTurn, setXTurn] = useState(true);\n  const [winSet, setWinSet] = useState([0, 0]);\n\n  const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8], // row win\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8], // col win\n      [0, 4, 8],\n      [2, 4, 6], //diagonals win\n    ];\n    for (let line of lines) {\n      const [a, b, c] = line;\n      if (\n        squares[a] &&\n        squares[b] &&\n        squares[c] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a]; // x or 0\n      }\n    }\n    return null;\n  };\n\n  useEffect(() => {\n    let cloneWinSet = [...winSet];\n    let winner = calculateWinner(squares);\n    if (!winner) return;\n    if (winner === \"X\") cloneWinSet[0] = cloneWinSet[0] + 1;\n    else cloneWinSet[1] = cloneWinSet[1] + 1;\n    setWinSet(cloneWinSet);\n  }, [squares]);\n\n  const handleClickMove = (index) => {\n    const cloneBoard = [...squares];\n\n    const winnerDeclared = Boolean(calculateWinner(cloneBoard));\n    const squareFilled = Boolean(cloneBoard[index]);\n    if (winnerDeclared || squareFilled) return;\n\n    cloneBoard[index] = xTurn ? \"X\" : \"0\";\n    setSquares(cloneBoard);\n    setXTurn(!xTurn);\n  };\n\n  return (\n    <Fragment>\n      <div className=\"board\">\n        <Score placement=\"top\" xTurn={xTurn} winScore={winSet[0]} />\n\n        {[...Array(3)].map((e, k) => (\n          <div className=\"row\" id={\"ROWK_\" + k} key={\"row_\" + k}>\n            {[...Array(3)].map((e, i) => (\n              <Square\n                onClick={() => {\n                  handleClickMove(3 * k + i);\n                }}\n                currentVal={squares[3 * k + i]}\n                key={\"square_\" + i + k}\n              />\n            ))}\n          </div>\n        ))}\n        <Score placement=\"bottom\" xTurn={xTurn} winScore={winSet[1]} />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\n\nconst Game = () => {\n  return (\n    <div className=\"game\">\n      Tic Tac Toe\n      <Board />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\n\nconst Mode = (props) => {\n  const { setMode } = props;\n  return (\n    <div className=\"modeCnt\">\n      <div className=\"vsDesc\">VS</div>\n      <div className=\"modeCol\">\n        <div className=\"modeChoice\" onClick={() => setMode(\"H\")}>\n          HUMAN\n          <br />\n          <div className=\"modeTag hu\">Intelligence</div>\n        </div>\n        <div className=\"modeChoice\" onClick={() => setMode(\"A\")}>\n          ARTIFICIAL <br />\n          <div className=\"modeTag ai\">Intelligence</div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Mode;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nimport Mode from \"./Mode\";\n\nfunction App() {\n  const [mode, setMode] = useState(null);\n  return (\n    <div className=\"App\">{mode ? <Game /> : <Mode setMode={setMode} />}</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}